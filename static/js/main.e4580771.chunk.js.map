{"version":3,"sources":["Components/TodoTask.tsx","App.tsx","index.tsx"],"names":["TodoTask","task","completeTask","className","taskName","deadline","onClick","App","useState","setTask","setDeadline","todoList","setTodoList","handleChange","event","target","name","value","Number","taskNameToDelete","filter","type","placeholder","onChange","newTask","map","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAqBeA,EAZE,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,aACxB,OACE,sBAAKC,UAAU,OAAf,UACE,sBAAKA,UAAU,UAAf,UACE,+BAAOF,EAAKG,WACZ,+BAAOH,EAAKI,cAEd,wBAAQC,QAAS,kBAAMJ,EAAaD,EAAKG,WAAzC,mBCiDSG,EA5DC,WAAO,IAAD,EACIC,mBAAiB,IADrB,mBACbP,EADa,KACPQ,EADO,OAEYD,mBAAiB,GAF7B,mBAEbH,EAFa,KAEHK,EAFG,OAGYF,mBAAkB,IAH9B,mBAGbG,EAHa,KAGHC,EAHG,KAMdC,EAAe,SAACC,GACM,SAAtBA,EAAMC,OAAOC,KACfP,EAAQK,EAAMC,OAAOE,OAGrBP,EAAYQ,OAAOJ,EAAMC,OAAOE,SAW9Bf,EAAe,SAACiB,GACpBP,EACED,EAASS,QAAO,SAACnB,GACf,OAAOA,EAAKG,WAAae,OAK/B,OACE,sBAAKhB,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,uBACEkB,KAAK,OACLC,YAAY,UACZC,SAAUV,EACVG,KAAK,OACLC,MAAOhB,IAET,uBACEoB,KAAK,SACLC,YAAY,wBACZC,SAAUV,EACVG,KAAK,WACLC,MAAOZ,OAGX,wBAAQC,QAlCE,WACd,IAAMkB,EAAU,CAAEpB,SAAUH,EAAMI,SAAUA,GAC5CO,EAAY,GAAD,mBAAKD,GAAL,CAAea,KAC1Bf,EAAQ,IACRC,EAAY,IA8BR,yBAEF,qBAAKP,UAAU,WAAf,SACGQ,EAASc,KAAI,SAACxB,EAAayB,GAC1B,OAAO,cAAC,EAAD,CAAoBzB,KAAMA,EAAMC,aAAcA,GAA/BwB,YCtDhCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e4580771.chunk.js","sourcesContent":["import React from \"react\";\nimport { ITask } from \"../Interfaces\";\n\ninterface Props {\n  task: ITask;\n  // call a function as a type\n  completeTask(taskNameToDelete: string): void;\n}\n\nconst TodoTask = ({ task, completeTask }: Props) => {\n  return (\n    <div className=\"task\">\n      <div className=\"content\">\n        <span>{task.taskName}</span>\n        <span>{task.deadline}</span>\n      </div>\n      <button onClick={() => completeTask(task.taskName)}>X</button>\n    </div>\n  );\n};\n\nexport default TodoTask;\n","import React, { FC, ChangeEvent, useState } from \"react\";\nimport \"./App.css\";\nimport TodoTask from \"./Components/TodoTask\";\nimport { ITask } from \"./Interfaces\";\n\nconst App: FC = () => {\n  const [task, setTask] = useState<string>(\"\");\n  const [deadline, setDeadline] = useState<number>(0);\n  const [todoList, setTodoList] = useState<ITask[]>([]);\n\n  // not returning anything so return type is void\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    if (event.target.name === \"task\") {\n      setTask(event.target.value);\n    } else {\n      // converts a string value to a number\n      setDeadline(Number(event.target.value));\n    }\n  };\n\n  const addTask = (): void => {\n    const newTask = { taskName: task, deadline: deadline };\n    setTodoList([...todoList, newTask]);\n    setTask(\"\");\n    setDeadline(0);\n  };\n\n  const completeTask = (taskNameToDelete: string): void => {\n    setTodoList(\n      todoList.filter((task) => {\n        return task.taskName !== taskNameToDelete;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <div className=\"inputContainer\">\n          <input\n            type=\"text\"\n            placeholder=\"Task...\"\n            onChange={handleChange}\n            name=\"task\"\n            value={task}\n          />\n          <input\n            type=\"number\"\n            placeholder=\"Deadline (in Days)...\"\n            onChange={handleChange}\n            name=\"deadline\"\n            value={deadline}\n          />\n        </div>\n        <button onClick={addTask}>Add Task</button>\n      </div>\n      <div className=\"todoList\">\n        {todoList.map((task: ITask, key: number) => {\n          return <TodoTask key={key} task={task} completeTask={completeTask} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}